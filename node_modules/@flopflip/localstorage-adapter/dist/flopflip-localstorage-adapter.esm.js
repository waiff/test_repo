import _asyncToGenerator from '@babel/runtime/helpers/esm/asyncToGenerator';
import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import _objectSpread from '@babel/runtime/helpers/esm/objectSpread2';
import _slicedToArray from '@babel/runtime/helpers/esm/slicedToArray';
import _classCallCheck from '@babel/runtime/helpers/esm/classCallCheck';
import _createClass from '@babel/runtime/helpers/esm/createClass';
import _classPrivateFieldLooseBase from '@babel/runtime/helpers/esm/classPrivateFieldLooseBase';
import _classPrivateFieldLooseKey from '@babel/runtime/helpers/esm/classPrivateFieldLooseKey';
import _regeneratorRuntime from '@babel/runtime/regenerator';
import { exposeGlobally, normalizeFlags, normalizeFlag } from '@flopflip/adapter-utilities';
import createCache from '@flopflip/localstorage-cache';
import { AdapterSubscriptionStatus, AdapterConfigurationStatus, AdapterInitializationStatus, adapterIdentifiers } from '@flopflip/types';
import isEqual from 'lodash/isEqual';
import mitt from 'mitt';
import warning from 'tiny-warning';

var intialAdapterState = {
  subscriptionStatus: AdapterSubscriptionStatus.Subscribed,
  configurationStatus: AdapterConfigurationStatus.Unconfigured,
  flags: {},
  lockedFlags: new Set(),
  user: {},
  emitter: mitt()
};
var STORAGE_SLICE = '@flopflip';
var _internalConfiguredStatusChange__ = /*#__PURE__*/_classPrivateFieldLooseKey("__internalConfiguredStatusChange__");
var _cache = /*#__PURE__*/_classPrivateFieldLooseKey("cache");
var _adapterState = /*#__PURE__*/_classPrivateFieldLooseKey("adapterState");
var _getIsAdapterUnsubscribed = /*#__PURE__*/_classPrivateFieldLooseKey("getIsAdapterUnsubscribed");
var _getIsFlagLocked = /*#__PURE__*/_classPrivateFieldLooseKey("getIsFlagLocked");
var _didFlagsChange = /*#__PURE__*/_classPrivateFieldLooseKey("didFlagsChange");
var _getFlagsCacheKey = /*#__PURE__*/_classPrivateFieldLooseKey("getFlagsCacheKey");
var _subscribeToFlagsChanges = /*#__PURE__*/_classPrivateFieldLooseKey("subscribeToFlagsChanges");
var LocalStorageAdapter = /*#__PURE__*/function () {
  function LocalStorageAdapter() {
    var _this = this;
    _classCallCheck(this, LocalStorageAdapter);
    Object.defineProperty(this, _internalConfiguredStatusChange__, {
      writable: true,
      value: '__internalConfiguredStatusChange__'
    });
    Object.defineProperty(this, _cache, {
      writable: true,
      value: createCache({
        prefix: STORAGE_SLICE
      })
    });
    Object.defineProperty(this, _adapterState, {
      writable: true,
      value: void 0
    });
    this.id = void 0;
    Object.defineProperty(this, _getIsAdapterUnsubscribed, {
      writable: true,
      value: function value() {
        return _classPrivateFieldLooseBase(_this, _adapterState)[_adapterState].subscriptionStatus === AdapterSubscriptionStatus.Unsubscribed;
      }
    });
    Object.defineProperty(this, _getIsFlagLocked, {
      writable: true,
      value: function value(flagName) {
        return _classPrivateFieldLooseBase(_this, _adapterState)[_adapterState].lockedFlags.has(flagName);
      }
    });
    Object.defineProperty(this, _didFlagsChange, {
      writable: true,
      value: function value(nextFlags) {
        var previousFlags = _classPrivateFieldLooseBase(_this, _adapterState)[_adapterState].flags;
        if (previousFlags === undefined) return true;
        return !isEqual(nextFlags, previousFlags);
      }
    });
    Object.defineProperty(this, _getFlagsCacheKey, {
      writable: true,
      value: function value(user) {
        return [user.key, 'flags'].filter(Boolean).join('/');
      }
    });
    Object.defineProperty(this, _subscribeToFlagsChanges, {
      writable: true,
      value: function value(_ref) {
        var _ref$pollingInteralMs = _ref.pollingInteralMs,
          pollingInteralMs = _ref$pollingInteralMs === void 0 ? 1000 * 60 : _ref$pollingInteralMs,
          user = _ref.user;
        setInterval(function () {
          if (!_classPrivateFieldLooseBase(_this, _getIsAdapterUnsubscribed)[_getIsAdapterUnsubscribed]()) {
            var nextFlags = normalizeFlags(_classPrivateFieldLooseBase(_this, _cache)[_cache].get(_classPrivateFieldLooseBase(_this, _getFlagsCacheKey)[_getFlagsCacheKey](user)));
            if (_classPrivateFieldLooseBase(_this, _didFlagsChange)[_didFlagsChange](nextFlags)) {
              _classPrivateFieldLooseBase(_this, _adapterState)[_adapterState].flags = nextFlags;
              _classPrivateFieldLooseBase(_this, _adapterState)[_adapterState].emitter.emit('flagsStateChange', nextFlags);
            }
          }
        }, pollingInteralMs);
      }
    });
    this.updateFlags = function (flags, options) {
      var isAdapterConfigured = _this.getIsConfigurationStatus(AdapterConfigurationStatus.Configured);
      warning(isAdapterConfigured, '@flopflip/localstorage-adapter: adapter not configured. Flags can not be updated before.');
      if (!isAdapterConfigured) return;
      var flagsCacheKey = _classPrivateFieldLooseBase(_this, _getFlagsCacheKey)[_getFlagsCacheKey](_classPrivateFieldLooseBase(_this, _adapterState)[_adapterState].user);
      var previousFlags = _classPrivateFieldLooseBase(_this, _cache)[_cache].get(flagsCacheKey);
      var updatedFlags = Object.entries(flags).reduce(function (updatedFlags, _ref2) {
        var _ref3 = _slicedToArray(_ref2, 2),
          flagName = _ref3[0],
          flagValue = _ref3[1];
        var _normalizeFlag = normalizeFlag(flagName, flagValue),
          _normalizeFlag2 = _slicedToArray(_normalizeFlag, 2),
          normalizedFlagName = _normalizeFlag2[0],
          normalizedFlagValue = _normalizeFlag2[1];
        if (_classPrivateFieldLooseBase(_this, _getIsFlagLocked)[_getIsFlagLocked](normalizedFlagName)) {
          return updatedFlags;
        }
        if (options !== null && options !== void 0 && options.lockFlags) {
          _classPrivateFieldLooseBase(_this, _adapterState)[_adapterState].lockedFlags.add(normalizedFlagName);
        }
        updatedFlags = _objectSpread(_objectSpread({}, updatedFlags), {}, _defineProperty({}, normalizedFlagName, normalizedFlagValue));
        return updatedFlags;
      }, {});
      var nextFlags = _objectSpread(_objectSpread({}, previousFlags), updatedFlags);
      _classPrivateFieldLooseBase(_this, _cache)[_cache].set(flagsCacheKey, nextFlags);
      _classPrivateFieldLooseBase(_this, _adapterState)[_adapterState].flags = nextFlags;
      _classPrivateFieldLooseBase(_this, _adapterState)[_adapterState].emitter.emit('flagsStateChange', nextFlags);
    };
    this.unsubscribe = function () {
      _classPrivateFieldLooseBase(_this, _adapterState)[_adapterState].subscriptionStatus = AdapterSubscriptionStatus.Unsubscribed;
    };
    this.subscribe = function () {
      _classPrivateFieldLooseBase(_this, _adapterState)[_adapterState].subscriptionStatus = AdapterSubscriptionStatus.Subscribed;
    };
    _classPrivateFieldLooseBase(this, _adapterState)[_adapterState] = _objectSpread({}, intialAdapterState);
    this.id = adapterIdentifiers.localstorage;
  }
  _createClass(LocalStorageAdapter, [{
    key: "configure",
    value: function () {
      var _configure = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(adapterArgs, adapterEventHandlers) {
        var _this2 = this;
        var handleFlagsChange, handleStatusChange, user, pollingInteralMs;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                handleFlagsChange = function handleFlagsChange(nextFlags) {
                  if (_classPrivateFieldLooseBase(_this2, _getIsAdapterUnsubscribed)[_getIsAdapterUnsubscribed]()) return;
                  adapterEventHandlers.onFlagsStateChange({
                    flags: nextFlags,
                    id: _this2.id
                  });
                };
                handleStatusChange = function handleStatusChange(nextStatus) {
                  if (_classPrivateFieldLooseBase(_this2, _getIsAdapterUnsubscribed)[_getIsAdapterUnsubscribed]()) return;
                  adapterEventHandlers.onStatusStateChange({
                    status: nextStatus,
                    id: _this2.id
                  });
                };
                _classPrivateFieldLooseBase(this, _adapterState)[_adapterState].emitter.on('flagsStateChange', handleFlagsChange);
                _classPrivateFieldLooseBase(this, _adapterState)[_adapterState].emitter.on('statusStateChange', handleStatusChange);
                this.setConfigurationStatus(AdapterConfigurationStatus.Configuring);
                user = adapterArgs.user, pollingInteralMs = adapterArgs.pollingInteralMs;
                _classPrivateFieldLooseBase(this, _adapterState)[_adapterState].user = user;
                return _context.abrupt("return", Promise.resolve().then(function () {
                  _this2.setConfigurationStatus(AdapterConfigurationStatus.Configured);
                  var flags = normalizeFlags(_classPrivateFieldLooseBase(_this2, _cache)[_cache].get(_classPrivateFieldLooseBase(_this2, _getFlagsCacheKey)[_getFlagsCacheKey](user)));
                  _classPrivateFieldLooseBase(_this2, _adapterState)[_adapterState].flags = flags;
                  _classPrivateFieldLooseBase(_this2, _adapterState)[_adapterState].emitter.emit('flagsStateChange', flags);
                  _classPrivateFieldLooseBase(_this2, _adapterState)[_adapterState].emitter.emit(_classPrivateFieldLooseBase(_this2, _internalConfiguredStatusChange__)[_internalConfiguredStatusChange__]);
                  _classPrivateFieldLooseBase(_this2, _subscribeToFlagsChanges)[_subscribeToFlagsChanges]({
                    pollingInteralMs: pollingInteralMs,
                    user: user
                  });
                  return {
                    initializationStatus: AdapterInitializationStatus.Succeeded
                  };
                }));
              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function configure(_x, _x2) {
        return _configure.apply(this, arguments);
      }
      return configure;
    }()
  }, {
    key: "reconfigure",
    value: function () {
      var _reconfigure = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(adapterArgs, _adapterEventHandlers) {
        var previousFlags, nextUser;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                previousFlags = _classPrivateFieldLooseBase(this, _cache)[_cache].get(_classPrivateFieldLooseBase(this, _getFlagsCacheKey)[_getFlagsCacheKey](adapterArgs.user));
                _classPrivateFieldLooseBase(this, _adapterState)[_adapterState].flags = previousFlags || {};
                nextUser = adapterArgs.user;
                _classPrivateFieldLooseBase(this, _adapterState)[_adapterState].user = nextUser;
                _classPrivateFieldLooseBase(this, _adapterState)[_adapterState].emitter.emit('flagsStateChange', {});
                return _context2.abrupt("return", Promise.resolve({
                  initializationStatus: AdapterInitializationStatus.Succeeded
                }));
              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      function reconfigure(_x3, _x4) {
        return _reconfigure.apply(this, arguments);
      }
      return reconfigure;
    }()
  }, {
    key: "waitUntilConfigured",
    value: function () {
      var _waitUntilConfigured = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var _this3 = this;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", new Promise(function (resolve) {
                  if (_this3.getIsConfigurationStatus(AdapterConfigurationStatus.Configured)) resolve();else _classPrivateFieldLooseBase(_this3, _adapterState)[_adapterState].emitter.on(_classPrivateFieldLooseBase(_this3, _internalConfiguredStatusChange__)[_internalConfiguredStatusChange__], resolve);
                }));
              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));
      function waitUntilConfigured() {
        return _waitUntilConfigured.apply(this, arguments);
      }
      return waitUntilConfigured;
    }()
  }, {
    key: "getIsConfigurationStatus",
    value: function getIsConfigurationStatus(configurationStatus) {
      return _classPrivateFieldLooseBase(this, _adapterState)[_adapterState].configurationStatus === configurationStatus;
    }
  }, {
    key: "setConfigurationStatus",
    value: function setConfigurationStatus(nextConfigurationStatus) {
      _classPrivateFieldLooseBase(this, _adapterState)[_adapterState].configurationStatus = nextConfigurationStatus;
      _classPrivateFieldLooseBase(this, _adapterState)[_adapterState].emitter.emit('statusStateChange', {
        configurationStatus: _classPrivateFieldLooseBase(this, _adapterState)[_adapterState].configurationStatus
      });
    }
  }]);
  return LocalStorageAdapter;
}();
var adapter = new LocalStorageAdapter();
exposeGlobally(adapter);

var version = "12.3.6";

export { STORAGE_SLICE, adapter as default, version };
